import React, { useState } from "react";
import axios from "axios";

const CreateRents = () => {
  const [bookingid, setBookingId] = useState("");
  const [fullName, setFullName] = useState("");
  const [age, setAge] = useState("");
  const [contactNumber, setContactNumber] = useState("");
  const [emailAddress, setEmailAddress] = useState("");
  const [passportNumber, setPassportNumber] = useState("");
  const [airlineName, setAirlineName] = useState("");
  const [flightClass, setFlightClass] = useState("");
  const [noOfPassengers, setNoOfPassengers] = useState("");
  const [seatType, setSeatType] = useState("");
  const [ticketPrice, setTicketPrice] = useState("");
  const [paymentMethod, setPaymentMethod] = useState("");
  const [formErrors, setFormErrors] = useState({});

  // Validating form details
  const validateForm = () => {
    const errors = {};
    let formIsValid = true;

    if (!bookingid.trim()) {
      errors.bookingid = "Booking ID is required";
      formIsValid = false;
    }

    if (!fullName.trim()) {
      errors.fullName = "Full name is required";
      formIsValid = false;
    }

    if (!age.trim()) {
      errors.age = "Age is required";
      formIsValid = false;
    }

    if (!contactNumber.trim()) {
      errors.contactNumber = "Contact number is required";
      formIsValid = false;
    }

    if (!emailAddress.trim()) {
      errors.emailAddress = "Email address is required";
      formIsValid = false;
    }

    if (!passportNumber.trim()) {
      errors.passportNumber = "Passport number is required";
      formIsValid = false;
    }

    if (!airlineName.trim()) {
      errors.airlineName = "Airline name is required";
      formIsValid = false;
    }

    if (!flightClass.trim()) {
      errors.flightClass = "Flight class is required";
      formIsValid = false;
    }

    if (!flightClass.trim()) {
      errors.flightClass = "Flight class is required";
      formIsValid = false;
    }

    if (!flightClass.trim()) {
      errors.flightClass = "Flight class is required";
      formIsValid = false;
    }



    

    

    setFormErrors(errors);
    return formIsValid;
  };

  const sendData = async (e) => {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    try {
      const newRentData = {
        carOrderid,
        destination,
        vehicleType,
        pickUpLocation,
        pickUpDate,
        dropOffLocation,
        dropOffDate,
      };

      await axios.post("http://localhost:8000/rent/save", newRentData);

      alert("Details saved successfully");
    } catch (error) {
      console.error("Error occurred while processing axios post request:", error);
      if (error.response && error.response.data && error.response.data.error) {
        alert(error.response.data.error);
      } else {
        alert("Failed to save record");
      }
    }

    // Reset form state
    setCarOrderId("");
    setDestination("");
    setVehicleType("");
    setPickUpLocation("");
    setpickUpDate("");
    setDropOffLocation("");
    setDropOffDate("");
  };

  const getOneDayLaterDate = () => {
    const today = new Date();
    today.setDate(today.getDate() + 1);
    return today.toISOString().split("T")[0];
  };

  return (
    <div className="container">
      <button className="btn-back">
        <a href="/rentDetails" className="back-link">Back</a>
      </button>
      <div className="form-container">
        <h1 className="form-title">Rent a Car</h1>
        <form onSubmit={sendData}>
          <div className="form-group">
            <label>Order ID</label>
            <input
              type="text"
              className={`input ${formErrors.carOrderid && "input-error"}`}
              onChange={(e) => setCarOrderId(e.target.value)}
              value={carOrderid}
            />
            {formErrors.carOrderid && <span className="error-text">{formErrors.carOrderid}</span>}
          </div>

          <div className="form-group">
            <label>Destination</label>
            <input
              type="text"
              className={`input ${formErrors.destination && "input-error"}`}
              onChange={(e) => setDestination(e.target.value)}
              value={destination}
            />
            {formErrors.destination && <span className="error-text">{formErrors.destination}</span>}
          </div>

          <div className="form-group">
            <label>Vehicle Type</label>
            <select
              className={`input ${formErrors.vehicleType && "input-error"}`}
              onChange={(e) => setVehicleType(e.target.value)}
              value={vehicleType}
            >
              <option value="">Select a Vehicle type</option>
              <option value="Car">Car</option>
              <option value="Van">Van</option>
              <option value="Bike">Bike</option>
            </select>
            {formErrors.vehicleType && <span className="error-text">{formErrors.vehicleType}</span>}
          </div>

          <div className="form-group">
            <label>Pick Up Location</label>
            <input
              type="text"
              className={`input ${formErrors.pickUpLocation && "input-error"}`}
              onChange={(e) => setPickUpLocation(e.target.value)}
              value={pickUpLocation}
            />
            {formErrors.pickUpLocation && <span className="error-text">{formErrors.pickUpLocation}</span>}
          </div>

          <div className="form-group">
            <label>Pick Up Date</label>
            <input
              type="date"
              className={`input ${formErrors.pickUpDate && "input-error"}`}
              value={pickUpDate}
              min={getOneDayLaterDate()}
              onChange={(e) => setpickUpDate(e.target.value)}
            />
            {formErrors.pickUpDate && <span className="error-text">{formErrors.pickUpDate}</span>}
          </div>

          <div className="form-group">
            <label>Drop Off Location</label>
            <input
              type="text"
              className="input"
              onChange={(e) => setDropOffLocation(e.target.value)}
              value={dropOffLocation}
            />
          </div>

          <div className="form-group">
            <label>Drop Off Date</label>
            <input
              type="date"
              className={`input ${formErrors.dropOffDate && "input-error"}`}
              value={dropOffDate}
              min={new Date().toISOString().split("T")[0]}
              onChange={(e) => setDropOffDate(e.target.value)}
            />
            {formErrors.dropOffDate && <span className="error-text">{formErrors.dropOffDate}</span>}
          </div>

          <button type="submit" className="btn-submit">Save</button>
        </form>
      </div>
    </div>
  );
};

export default CreateRents;
